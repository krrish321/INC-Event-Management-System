import db from "../config/db.js";

// ðŸ”¹ Get all events
export const getEvents = async (req, res) => {
Â  try {
Â  Â  const [rows] = await db.query("SELECT * FROM events ORDER BY start_datetime DESC");
Â  Â  res.json(rows);
Â  } catch (error) {
Â  Â  res.status(500).json({ message: error.message });
Â  }
};

// ðŸ”¹ Create new event
export const createEvent = async (req, res) => {
Â  const { 
Â  Â  eventName, 
Â  Â  description, 
Â  Â  startDate, 
Â  Â  startTime, 
Â  Â  endDate, 
Â  Â  endTime, 
Â  Â  issueDate, 
Â  Â  location, 
Â  Â  level, 
Â  Â  eventType, 
Â  Â  assignedUser 
} = req.body;

Â  try {
Â  Â  const start_datetime = `${startDate} ${startTime}`;
Â  Â  const end_datetime = `${endDate} ${endTime}`;

Â  Â  // SQL query
Â  Â  const sql = `INSERT INTO events (name, description, start_datetime, end_datetime, issue_date, location, event_type, level, created_by) VALUES (?, ?, ?, ?, ?, ?, ?, ?, ?)`;

Â  Â  // Values array 
Â  Â  const values = [
Â  Â  Â  eventName, 
Â  Â  Â  description, 
Â  Â  Â  start_datetime, 
Â  Â  Â  end_datetime, 
Â  Â  Â  issueDate, 
Â  Â  Â  location, 
Â  Â  Â  eventType, 
Â  Â  Â  level, 
Â  Â  Â  Number(assignedUser)
Â  Â  ];
    
Â  Â  const [result] = await db.query(sql, values);

Â  Â  res.status(201).json({ message: "Event created successfully", eventId: result.insertId });
Â  } catch (error) {
Â  Â  console.error("Error inserting event =>", error);
Â  Â  res.status(500).json({ message: error.message });
Â  }
};

// ðŸ”¹ Update event by ID
export const updateEvent = async (req, res) => {
Â  const { id } = req.params;
Â  const { 
Â  Â  eventName, 
Â  Â  description, 
Â  Â  startDate, 
Â  Â  startTime, 
Â  Â  endDate, 
Â  Â  endTime, 
Â  Â  issueDate, 
Â  Â  location, 
Â  Â  level, 
Â  Â  eventType, 
Â  Â  assignedUser 
} = req.body;
Â  
Â  try {
Â  Â  const start_datetime = `${startDate} ${startTime}`;
Â  Â  const end_datetime = `${endDate} ${endTime}`;

Â  Â  const [result] = await db.query(
Â  Â  Â  `UPDATE events SET name=?, description=?, start_datetime=?, end_datetime=?, issue_date=?, location=?, event_type=?, level=?, created_by=? WHERE id=?`,
Â  Â  Â  [
Â  Â  Â  Â  eventName, 
Â  Â  Â  Â  description, 
Â  Â  Â  Â  start_datetime, 
Â  Â  Â  Â  end_datetime, 
Â  Â  Â  Â  issueDate, 
Â  Â  Â  Â  location, 
Â  Â  Â  Â  eventType, 
Â  Â  Â  Â  level, 
Â  Â  Â  Â  Number(assignedUser), 
Â  Â  Â  Â  id
Â  Â  Â  ]
Â  Â  );

Â  Â  if (result.affectedRows === 0) return res.status(404).json({ message: "Event not found" });
Â  Â  res.status(200).json({ message: "Event updated successfully" });
Â  } catch (err) {
Â  Â  res.status(500).json({ message: err.message });
Â  }
};

// ðŸ”¹ Delete event by ID
export const deleteEvent = async (req, res) => {
Â  const { id } = req.params;
Â  try {
Â  Â  const [result] = await db.query("DELETE FROM events WHERE id=?", [id]);
Â  Â  if (result.affectedRows === 0) return res.status(404).json({ message: "Event not found" });
Â  Â  res.status(200).json({ message: "Event deleted successfully" });
Â  } catch (err) {
Â  Â  res.status(500).json({ message: err.message });
Â  }
};

// ðŸ”¹ Get single event by ID
export const getEventById = async (req, res) => {
Â  const { id } = req.params;
Â  try {
Â  Â  const [rows] = await db.query("SELECT * FROM events WHERE id=?", [id]);
Â  Â  if (rows.length === 0) return res.status(404).json({ message: "Event not found" });
Â  Â  res.status(200).json(rows[0]);
Â  } catch (err) {
Â  Â  res.status(500).json({ message: err.message });
Â  }
};